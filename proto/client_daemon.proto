syntax = "proto3";
package clientdaemon;

import "google/protobuf/empty.proto";

// Service for talking between the client and the daemon
// TODO: Come up with a better name
service ClientDaemon {
    // Get the chat history with some user
    rpc GetChatHistory(ChatHistoryRequest) returns (ChatHistoryResponse);

    // Get the UI state on startup
    rpc GetUIState(google.protobuf.Empty) returns (UIStateResponse);

    // Subscribe to events emitted by the daemon
    rpc SubscribeToEvents(google.protobuf.Empty) returns (stream Event);

    // Send a message
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    // Edit a message
    rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);
    // Delete a message
    rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
}

// request to get chat history
message ChatHistoryRequest {
    // user to get chat history with
    int64 user_id = 1;
    // id of last message received
    int64 last_id = 2;
}

// chat history with a user
message ChatHistoryResponse {
    // all of the messages
    repeated Message messages = 1;
}


message UIStateResponse {
    repeated int64 conversations = 1;
}


// An event emitted by the daemon
message Event {
    // New or edited message
    message MessageEvent {
        // edited message
        bool edit = 1;
        // who sent it
        int64 sender = 2;
        // the message
        Message message = 3;
    }

    // Deleted message
    message MessageDeleteEvent {
        // who
        int64 sender = 1;
        // message id
        string id = 2;
    }

    // Other user request to talk
    message ChatRequestEvent {
        // user name of the user
        string username = 1;
        string addr = 2;
    }

    oneof event {
        MessageEvent message = 1;
        MessageDeleteEvent message_delete = 2;
        ChatRequestEvent chat_request = 3;
    }
}


// Request to send a message
message SendMessageRequest {
    // user id of recipient
    int64 recipient = 1;
    
    // content of the message
    string content = 2;
}

// Response to client after sending message
message SendMessageResponse {
    // id assigned to the message
    int64 id = 1;
}


message EditMessageRequest {
    // user id of recipient
    int64 recipient = 1;
    Message message = 2;
}

// Currently blank, just here for the future
message EditMessageResponse {}

message DeleteMessageRequest {
    // user id of recipient
    int64 recipient = 1;
    Message message = 2;
}

// Currently blank, just here for the future
message DeleteMessageResponse {}

message Message {
    int64 id = 1;
    uint64 timestamp = 2;
    int64 user = 3;
    string content = 4;
    // TODO: figure out how to do attachments
    // repeated bytes attachments = 5;
}
